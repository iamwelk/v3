$(function(){
	var keyWords = [];//全部关键词
	var dataOfKey = [];//关键词对应数据
	var showWords = [];//在页面显示的数据关键词
	
	var relationShip = [
		{"姓名":"张三", "产品":"P1"},
		{"姓名":"张三", "技能":"前端"},
		{"姓名":"李四", "产品":"P3"},
		{"姓名":"李四", "产品":"P4"},
		{"姓名":"李四", "技能":"后台"},
		{"姓名":"李四", "技能":"数据库"},
		{"姓名":"王五", "产品":"P2"},
		{"姓名":"王五", "产品":"P4"},
		{"姓名":"王五", "产品":"P5"},
		{"姓名":"王五", "技能":"交互"},
		{"姓名":"王五", "技能":"设计"},
		{"姓名":"张三", "部门":"D1"},
		{"姓名":"李四", "部门":"D2"},
		{"姓名":"王五", "部门":"D3"},
		{"产品":"大数据平台", "数据":"广告数据"},
		{"产品":"大数据平台", "功能":"数据集中存储"},
		//{"所属部门":"D4","人员姓名":"louwk"},
		{"姓名":"张三","产品":"大数据平台"},
		{"产品":"大数据平台", "部门":"D2"}
		//{"产品":"P5","功能":"Web优化"},
		//{"产品":"P6","功能":"Web优化"},
		//{"产品":"P7","功能":"Web优化"},
		//{"产品":"P8","功能":"Web优化"},
		//{"产品":"P9","功能":"Web优化"},
		//{"产品":"P10","功能":"Web优化"},
		//{"产品":"P11","功能":"Web优化"},
		//{"产品":"P12","功能":"Web优化"},
		//{"产品":"P13","功能":"Web优化"},
		//{"产品":"P14","功能":"Web优化"},
		//{"产品":"P15","功能":"Web优化"}
		
		//{"key1":"value1"}
	];
	
	
	//将数据加入到keyWords和dataOfKey中	
	function addToArray(sKey, sValue){
		if(keyWords.indexOf(sKey) == -1){
			keyWords.push(sKey);
			var len = dataOfKey.length;
			dataOfKey[len] = [];
		}
		var index = keyWords.indexOf(sKey);
		if(dataOfKey[index].indexOf(sValue) == -1){
			dataOfKey[index].push(sValue);
		}
	}
	
	//数据初始化
	function dataInitial(){
		for(var i = 0; i < relationShip.length; i++){
			$.each(relationShip[i], function(sKey, sValue){
				addToArray(sKey, sValue);
			})
		}
		showWords = keyWords.concat();
	}
	
	function showTools(){
		var toolsbar = $("#collapse1 .panel-body");
		for(var i = 0; i < keyWords.length; i++){
			toolsbar.append('<div class="checkbox"><label><input type="checkbox" value="'+keyWords[i]+'" checked="checked">' + keyWords[i] + 
				'</label></div>');
		}
	}
	
	function showTopmenu(){
		var topMenu = $("#SortableMenu");
		for(var i = 0; i < showWords.length; i++){
			if(showWords[i]){
				topMenu.append('<li><span>' + showWords[i] + '</span></li>');	
			}	
		}
	}
	
	function showCols(){
		var bottomCol = $("#Column");
		for(var i = 0; i < showWords.length-1; i++){
			if(showWords[i]){
				bottomCol.append('<div id="col'+ i + '" class="colA"></div><div id="can' + i + '" class="colB">' +
				'<canvas class="Canvas">Your browser does not support HTML5 Canvas.</canvas></div>');
			}	
		}
		bottomCol.append('<div id="col' + i + '" class="colA"></div>');
	}
	
	//展示页面结构
	function showStructure(){		
		showTools();
		showTopmenu();
		showCols();
	}
	
	function showData(){
		var temp = $("#Column .colA");
		var content = $("#SortableMenu span");
		for(var i = 0; i < content.length; i++){
			var st = $(content[i]).text();
			
			var index = keyWords.indexOf(st);
			var numOfData = dataOfKey[index].length;
			for(var j = 0; j < numOfData; j++){
				$(temp[i]).append('<div class="rowData bg-primary">'+dataOfKey[index][j]+'</div>');
			}
		}
	}
	
	function resetCanvas(n){
		var max = $(".colB").length;
		if(n < 0 || n > (max-1)){
			return ;
		}
		var canvas = $("#can"+n+" canvas").get(0);
		canvas.width = 60;
		canvas.height = $("#Column").height();
	}
	
	//判断两点之间是否有关系
	function hasRelation(str1, str2){
		for(var i = 0; i < relationShip.length; i++){
			var arrayOfValue = [];
			for(key in relationShip[i]){				
				arrayOfValue.push(relationShip[i][key]);
			}			
			if((arrayOfValue.indexOf(str1) !== -1) && (arrayOfValue.indexOf(str2) !== -1)){	
				return true;
			}
		}
		return false;
	}
	
	function lineBetween(node1, nodesNext, n){
		var canvas = $("#can"+n+" canvas").get(0);
		var ctx = canvas.getContext("2d");
		
		var posY1 = $(node1).position().top + node1.offsetHeight/2;
		for(var j = 0; j < nodesNext.length; j++){
			var node2 = nodesNext[j];
			if(hasRelation(node1.innerHTML, node2.innerHTML)){
				posY2 = $(node2).position().top + node2.offsetHeight/2;
				ctx.beginPath();
				ctx.moveTo(0,posY1);
				ctx.bezierCurveTo(30, posY1, 30, posY2, 60, posY2);
				ctx.stroke();
			}
		}
	}
	
	function paint(){
		var n = $("#SortableMenu li").length;
		for(var i = 0; i < n-1; i++){
			var nodes = $("#col"+i+" .rowData");
			var nodesNext = $("#col"+(i+1)+" .rowData");
			resetCanvas(i);
			for(var j = 0; j < nodes.length; j++){
				var node = nodes[j];
				lineBetween(node, nodesNext, i);
			}
		}
	}
	
	function start(){
		dataInitial();
		showStructure();
		showData();
		paint();
	}
	
	start();
		
	function autoComplete(){
		var data= [];
		var d = $(".rowData");
		//console.log(d.length);
		for(var i = 0; i < d.length; i++){
			data.push(d[i].innerHTML);
		}
		//console.log(data);
		var list = $("#SortableMenu li");

		$("#tags").autocomplete({
			source:data
		});
	}
	
	autoComplete();
	
	function lineToPre(node1, nodesPre, n){
		if(n > 0){
			var canvas = $("#can"+(n-1)+" canvas").get(0);
			var ctx = canvas.getContext("2d");
			var posY1 = $(node1).position().top + node1.offsetHeight/2;
			for(var i = 0; i < nodesPre.length; i++){
				var node2 = nodesPre[i];
				var posY2 = $(node2).position().top + node2.offsetHeight/2;
				ctx.beginPath();
				ctx.moveTo(0,posY2);
				ctx.bezierCurveTo(30, posY2, 30, posY1, 60, posY1);
				ctx.strokeStyle = "red";
				ctx.lineWidth = 3;
				ctx.stroke();
			}
		}
	}
	
	function lineToNext(node1, nodesNext, n){
		if(n < showWords.length-1){
			
			var canvas = $("#can"+n+" canvas").get(0);
			var ctx = canvas.getContext("2d");
			var posY1 = $(node1).position().top + node1.offsetHeight/2;
			for(var i = 0; i < nodesNext.length; i++){
				var node2 = nodesNext[i];
				var posY2 = $(node2).position().top + node2.offsetHeight/2;
				ctx.beginPath();
				ctx.moveTo(0,posY1);
				ctx.bezierCurveTo(30, posY1, 30, posY2, 60, posY2);
				ctx.strokeStyle = "blue";
				ctx.lineWidth = 3;
				ctx.stroke();
			}
		}
	}
	
	function getPreNodes(str, n){
		var nodes = [];
		if(n > 0){			
			var temP = $("#col"+(n-1)+" .rowData");
			for(var k = 0; k < temP.length; k++){
				if(hasRelation(str, temP[k].innerHTML)){
					nodes.push(temP[k]);
					$(temP[k]).addClass("bg-danger").removeClass("bg-primary");
				}else{
					//$(temP[k]).addClass("bg-primary").removeClass("bg-danger");
				}
			}
		}
		return nodes;
	}
	
	function getNextNodes(str, n){
		var nodes = [];
		if(n < ($(".colA").length - 1)){
			var temN = $("#col"+(n+1)+" .rowData");
			for(var k = 0; k < temN.length; k++){
				if(hasRelation(str, temN[k].innerHTML)){
					nodes.push(temN[k]);
					$(temN[k]).addClass("bg-danger").removeClass("bg-primary");
					//console.log(temN[k].innerHTML);
				}else{
					//$(temN[k]).addClass("bg-primary").removeClass("bg-danger");
				}
			}
		}
		return nodes;
	}
	
	function laysBe(node, i, n){//lays before
		if(n > 0){
			var nodesPre = [];
			nodesPre = getPreNodes(node.innerHTML, i);
			console.log("i="+i+" n="+n);
			for(var j = 0; j < nodesPre.length; j++){
				console.log(nodesPre[j].innerHTML);
			}
			lineToPre(node, nodesPre, i);
			for(var k = 0; k < nodesPre.length; k++){
				laysBe(nodesPre[k], i-1, n-1);
			}
		}
	}
	
	function laysAf(node, i, n){//lays after
		if(n > 0){
			var nodesNext = [];
			nodesNext = getNextNodes(node.innerHTML, i);
			console.log("i="+i+" n="+n);
			for(var j = 0; j < nodesNext.length; j++){
				console.log(nodesNext[j].innerHTML);
			}
			lineToNext(node, nodesNext, i);
			for(var k = 0; k < nodesNext.length; k++){
				laysAf(nodesNext[k], i+1, n-1);
			}
		}
	}
	
	function seandhi(str, n){//search and highlight
		var n = arguments[1] ? arguments[1] : 1;//设置n默认为1
		var menu = $("#SortableMenu li span");
		$(".rowData").attr("class","rowData bg-primary");
		for(var i = 0; i < menu.length; i++){
			resetCanvas(i);
		}
		
		for(var i = 0; i < menu.length; i++){
			var rd = $("#col"+i+" .rowData");
			
			for(var j = 0; j < rd.length; j++){
				if(str == rd[j].innerHTML){
					$(rd[j]).addClass("bg-danger").removeClass("bg-primary");
					//前n层关系
					laysBe(rd[j], i, n);
					laysAf(rd[j], i, n);
				}
			}
		}
	}
	$("#target").submit(function(e){
		e.preventDefault();
		var str = $("#tags").val().replace('：',':').split(":");
		$(".rowData").attr("class","rowData bg-primary");
		seandhi(str[0], str[1]);
		$("#tags").val("");
		
	});
	
	function removeText(){
		$("#Column .colA").empty();
	}
	
	$("#SortableMenu").sortable({
		cursor:"move",
		opacity:0.5,
		revert:true,
		stop:function(event, ui){
			removeText();
			showData();
			paint();
		}
	});
	
	$("input[type=checkbox]").bind("click",function(e){
		var str = this.value;
		if(!this.checked){
			var index = showWords.indexOf(str);
			showWords.splice(index,1);
		}else{
			showWords.push(str);
		}
		$("#Column").empty();
		$("#SortableMenu").empty();
		showTopmenu();
		showCols();	
		showData();
		paint();
		autoComplete();
	});
	
	function addNodes(scene, container, n){//将第n列的内容加入container
		var nodes = $("#col"+n+" .rowData");
		//console.log("nodes:"+nodes);
		for(var i = 0; i < nodes.length; i++){
			var node = new JTopo.Node(nodes[i].innerHTML);
			//node.setLocation(Math.random()*200, Math.random()*200);
			node.textPosition = "Middle_Center";
			scene.add(node);
			container.add(node);
			//console.log("nodes[i]:"+nodes[i].innerHTML);
		}
	}
	
	function addLinks(scene, container){
		var i, j, k, m;
		for(i = 0; i < container.length; i++){
			for(j = 0; j < container[i].childs.length; j++){
				for(k = i+1; k < container.length; k++){
					for(m = 0; m < container[k].childs.length; m++){
						if(hasRelation(container[i].childs[j].text, container[k].childs[m].text)){
							var link = new JTopo.CurveLink(container[i].childs[j], container[k].childs[m]);
							link.strokeColor = JTopo.util.randomColor();
							scene.add(link);
							//console.log("i:"+i+" j:"+j+" k:"+k+" m:"+m);
							//console.log("a:"+container[i].childs[j].text+" b:"+container[k].childs[m].text);
						}
					}
					
				}
			}
		}
	}
	
	function tupu(){
		var canvas = document.getElementById("topo");
		canvas.width = 1000;
		canvas.height = 500;
		
		var stage = new JTopo.Stage(canvas);
		var scene = new JTopo.Scene(stage);
		scene.background = 'img/bg18.gif';
		
		var container = [];
		for(var i = 0; i < showWords.length; i++){
			container[i] = new JTopo.Container(showWords[i]);
			container[i].textPosition = "Middle_Center";
			container[i].font = "18pt 微软雅黑";
			container[i].width = 200;
			container[i].height = 200;
			scene.add(container[i]);
			addNodes(scene, container[i], i);	
		}
		addLinks(scene,container);
	}
	tupu();
});
